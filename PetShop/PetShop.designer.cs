#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace PetShop
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Pet Shop Database")]
	public partial class PetShopDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAccount(Account instance);
    partial void UpdateAccount(Account instance);
    partial void DeleteAccount(Account instance);
    partial void InsertItem(Item instance);
    partial void UpdateItem(Item instance);
    partial void DeleteItem(Item instance);
    partial void InsertLog(Log instance);
    partial void UpdateLog(Log instance);
    partial void DeleteLog(Log instance);
    partial void InsertOrigin(Origin instance);
    partial void UpdateOrigin(Origin instance);
    partial void DeleteOrigin(Origin instance);
    partial void InsertOwner(Owner instance);
    partial void UpdateOwner(Owner instance);
    partial void DeleteOwner(Owner instance);
    partial void InsertPet(Pet instance);
    partial void UpdatePet(Pet instance);
    partial void DeletePet(Pet instance);
    partial void InsertPurchase(Purchase instance);
    partial void UpdatePurchase(Purchase instance);
    partial void DeletePurchase(Purchase instance);
    partial void InsertStaff(Staff instance);
    partial void UpdateStaff(Staff instance);
    partial void DeleteStaff(Staff instance);
    partial void InsertStaffRole(StaffRole instance);
    partial void UpdateStaffRole(StaffRole instance);
    partial void DeleteStaffRole(StaffRole instance);
    partial void InsertVaccine(Vaccine instance);
    partial void UpdateVaccine(Vaccine instance);
    partial void DeleteVaccine(Vaccine instance);
    #endregion
		
		public PetShopDataContext() : 
				base(global::PetShop.Properties.Settings.Default.Pet_Shop_DatabaseConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public PetShopDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PetShopDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PetShopDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public PetShopDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Account> Accounts
		{
			get
			{
				return this.GetTable<Account>();
			}
		}
		
		public System.Data.Linq.Table<Item> Items
		{
			get
			{
				return this.GetTable<Item>();
			}
		}
		
		public System.Data.Linq.Table<Log> Logs
		{
			get
			{
				return this.GetTable<Log>();
			}
		}
		
		public System.Data.Linq.Table<Origin> Origins
		{
			get
			{
				return this.GetTable<Origin>();
			}
		}
		
		public System.Data.Linq.Table<Owner> Owners
		{
			get
			{
				return this.GetTable<Owner>();
			}
		}
		
		public System.Data.Linq.Table<Pet> Pets
		{
			get
			{
				return this.GetTable<Pet>();
			}
		}
		
		public System.Data.Linq.Table<Purchase> Purchases
		{
			get
			{
				return this.GetTable<Purchase>();
			}
		}
		
		public System.Data.Linq.Table<Staff> Staffs
		{
			get
			{
				return this.GetTable<Staff>();
			}
		}
		
		public System.Data.Linq.Table<StaffRole> StaffRoles
		{
			get
			{
				return this.GetTable<StaffRole>();
			}
		}
		
		public System.Data.Linq.Table<Vaccine> Vaccines
		{
			get
			{
				return this.GetTable<Vaccine>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Account")]
	public partial class Account : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Account_ID;
		
		private string _StaffRole_ID;
		
		private string _Account_Password;
		
		private EntityRef<StaffRole> _StaffRole;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnAccount_IDChanging(string value);
    partial void OnAccount_IDChanged();
    partial void OnStaffRole_IDChanging(string value);
    partial void OnStaffRole_IDChanged();
    partial void OnAccount_PasswordChanging(string value);
    partial void OnAccount_PasswordChanged();
    #endregion
		
		public Account()
		{
			this._StaffRole = default(EntityRef<StaffRole>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Account_ID
		{
			get
			{
				return this._Account_ID;
			}
			set
			{
				if ((this._Account_ID != value))
				{
					this.OnAccount_IDChanging(value);
					this.SendPropertyChanging();
					this._Account_ID = value;
					this.SendPropertyChanged("Account_ID");
					this.OnAccount_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffRole_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string StaffRole_ID
		{
			get
			{
				return this._StaffRole_ID;
			}
			set
			{
				if ((this._StaffRole_ID != value))
				{
					if (this._StaffRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffRole_IDChanging(value);
					this.SendPropertyChanging();
					this._StaffRole_ID = value;
					this.SendPropertyChanged("StaffRole_ID");
					this.OnStaffRole_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Account_Password", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Account_Password
		{
			get
			{
				return this._Account_Password;
			}
			set
			{
				if ((this._Account_Password != value))
				{
					this.OnAccount_PasswordChanging(value);
					this.SendPropertyChanging();
					this._Account_Password = value;
					this.SendPropertyChanged("Account_Password");
					this.OnAccount_PasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffRole_Account", Storage="_StaffRole", ThisKey="StaffRole_ID", OtherKey="StaffRole_ID", IsForeignKey=true)]
		public StaffRole StaffRole
		{
			get
			{
				return this._StaffRole.Entity;
			}
			set
			{
				StaffRole previousValue = this._StaffRole.Entity;
				if (((previousValue != value) 
							|| (this._StaffRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StaffRole.Entity = null;
						previousValue.Accounts.Remove(this);
					}
					this._StaffRole.Entity = value;
					if ((value != null))
					{
						value.Accounts.Add(this);
						this._StaffRole_ID = value.StaffRole_ID;
					}
					else
					{
						this._StaffRole_ID = default(string);
					}
					this.SendPropertyChanged("StaffRole");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Item")]
	public partial class Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Item_ID;
		
		private string _Item_Description;
		
		private int _Item_Price;
		
		private int _Item_Stock;
		
		private string _Item_Availability;
		
		private string _Item_Photo;
		
		private EntitySet<Log> _Logs;
		
		private EntitySet<Purchase> _Purchases;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnItem_IDChanging(string value);
    partial void OnItem_IDChanged();
    partial void OnItem_DescriptionChanging(string value);
    partial void OnItem_DescriptionChanged();
    partial void OnItem_PriceChanging(int value);
    partial void OnItem_PriceChanged();
    partial void OnItem_StockChanging(int value);
    partial void OnItem_StockChanged();
    partial void OnItem_AvailabilityChanging(string value);
    partial void OnItem_AvailabilityChanged();
    partial void OnItem_PhotoChanging(string value);
    partial void OnItem_PhotoChanged();
    #endregion
		
		public Item()
		{
			this._Logs = new EntitySet<Log>(new Action<Log>(this.attach_Logs), new Action<Log>(this.detach_Logs));
			this._Purchases = new EntitySet<Purchase>(new Action<Purchase>(this.attach_Purchases), new Action<Purchase>(this.detach_Purchases));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Item_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Item_ID
		{
			get
			{
				return this._Item_ID;
			}
			set
			{
				if ((this._Item_ID != value))
				{
					this.OnItem_IDChanging(value);
					this.SendPropertyChanging();
					this._Item_ID = value;
					this.SendPropertyChanged("Item_ID");
					this.OnItem_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Item_Description", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Item_Description
		{
			get
			{
				return this._Item_Description;
			}
			set
			{
				if ((this._Item_Description != value))
				{
					this.OnItem_DescriptionChanging(value);
					this.SendPropertyChanging();
					this._Item_Description = value;
					this.SendPropertyChanged("Item_Description");
					this.OnItem_DescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Item_Price", DbType="Int NOT NULL")]
		public int Item_Price
		{
			get
			{
				return this._Item_Price;
			}
			set
			{
				if ((this._Item_Price != value))
				{
					this.OnItem_PriceChanging(value);
					this.SendPropertyChanging();
					this._Item_Price = value;
					this.SendPropertyChanged("Item_Price");
					this.OnItem_PriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Item_Stock", DbType="Int NOT NULL")]
		public int Item_Stock
		{
			get
			{
				return this._Item_Stock;
			}
			set
			{
				if ((this._Item_Stock != value))
				{
					this.OnItem_StockChanging(value);
					this.SendPropertyChanging();
					this._Item_Stock = value;
					this.SendPropertyChanged("Item_Stock");
					this.OnItem_StockChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Item_Availability", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Item_Availability
		{
			get
			{
				return this._Item_Availability;
			}
			set
			{
				if ((this._Item_Availability != value))
				{
					this.OnItem_AvailabilityChanging(value);
					this.SendPropertyChanging();
					this._Item_Availability = value;
					this.SendPropertyChanged("Item_Availability");
					this.OnItem_AvailabilityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Item_Photo", DbType="VarChar(255)")]
		public string Item_Photo
		{
			get
			{
				return this._Item_Photo;
			}
			set
			{
				if ((this._Item_Photo != value))
				{
					this.OnItem_PhotoChanging(value);
					this.SendPropertyChanging();
					this._Item_Photo = value;
					this.SendPropertyChanged("Item_Photo");
					this.OnItem_PhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Log", Storage="_Logs", ThisKey="Item_ID", OtherKey="Item_ID")]
		public EntitySet<Log> Logs
		{
			get
			{
				return this._Logs;
			}
			set
			{
				this._Logs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Purchase", Storage="_Purchases", ThisKey="Item_ID", OtherKey="Item_ID")]
		public EntitySet<Purchase> Purchases
		{
			get
			{
				return this._Purchases;
			}
			set
			{
				this._Purchases.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Logs(Log entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_Logs(Log entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
		
		private void attach_Purchases(Purchase entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_Purchases(Purchase entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Logs")]
	public partial class Log : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Logs_ID;
		
		private System.DateTime _Logs_Date;
		
		private string _Logs_Description;
		
		private string _Staff_ID;
		
		private string _Purchase_ID;
		
		private string _Pet_ID;
		
		private string _Owners_ID;
		
		private string _Origin_ID;
		
		private string _Item_ID;
		
		private EntityRef<Item> _Item;
		
		private EntityRef<Origin> _Origin;
		
		private EntityRef<Owner> _Owner;
		
		private EntityRef<Pet> _Pet;
		
		private EntityRef<Purchase> _Purchase;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLogs_IDChanging(int value);
    partial void OnLogs_IDChanged();
    partial void OnLogs_DateChanging(System.DateTime value);
    partial void OnLogs_DateChanged();
    partial void OnLogs_DescriptionChanging(string value);
    partial void OnLogs_DescriptionChanged();
    partial void OnStaff_IDChanging(string value);
    partial void OnStaff_IDChanged();
    partial void OnPurchase_IDChanging(string value);
    partial void OnPurchase_IDChanged();
    partial void OnPet_IDChanging(string value);
    partial void OnPet_IDChanged();
    partial void OnOwners_IDChanging(string value);
    partial void OnOwners_IDChanged();
    partial void OnOrigin_IDChanging(string value);
    partial void OnOrigin_IDChanged();
    partial void OnItem_IDChanging(string value);
    partial void OnItem_IDChanged();
    #endregion
		
		public Log()
		{
			this._Item = default(EntityRef<Item>);
			this._Origin = default(EntityRef<Origin>);
			this._Owner = default(EntityRef<Owner>);
			this._Pet = default(EntityRef<Pet>);
			this._Purchase = default(EntityRef<Purchase>);
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Logs_ID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Logs_ID
		{
			get
			{
				return this._Logs_ID;
			}
			set
			{
				if ((this._Logs_ID != value))
				{
					this.OnLogs_IDChanging(value);
					this.SendPropertyChanging();
					this._Logs_ID = value;
					this.SendPropertyChanged("Logs_ID");
					this.OnLogs_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Logs_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Logs_Date
		{
			get
			{
				return this._Logs_Date;
			}
			set
			{
				if ((this._Logs_Date != value))
				{
					this.OnLogs_DateChanging(value);
					this.SendPropertyChanging();
					this._Logs_Date = value;
					this.SendPropertyChanged("Logs_Date");
					this.OnLogs_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Logs_Description", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Logs_Description
		{
			get
			{
				return this._Logs_Description;
			}
			set
			{
				if ((this._Logs_Description != value))
				{
					this.OnLogs_DescriptionChanging(value);
					this.SendPropertyChanging();
					this._Logs_Description = value;
					this.SendPropertyChanged("Logs_Description");
					this.OnLogs_DescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_ID", DbType="VarChar(50)")]
		public string Staff_ID
		{
			get
			{
				return this._Staff_ID;
			}
			set
			{
				if ((this._Staff_ID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaff_IDChanging(value);
					this.SendPropertyChanging();
					this._Staff_ID = value;
					this.SendPropertyChanged("Staff_ID");
					this.OnStaff_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Purchase_ID", DbType="VarChar(50)")]
		public string Purchase_ID
		{
			get
			{
				return this._Purchase_ID;
			}
			set
			{
				if ((this._Purchase_ID != value))
				{
					if (this._Purchase.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPurchase_IDChanging(value);
					this.SendPropertyChanging();
					this._Purchase_ID = value;
					this.SendPropertyChanged("Purchase_ID");
					this.OnPurchase_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pet_ID", DbType="VarChar(50)")]
		public string Pet_ID
		{
			get
			{
				return this._Pet_ID;
			}
			set
			{
				if ((this._Pet_ID != value))
				{
					if (this._Pet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPet_IDChanging(value);
					this.SendPropertyChanging();
					this._Pet_ID = value;
					this.SendPropertyChanged("Pet_ID");
					this.OnPet_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Owners_ID", DbType="VarChar(50)")]
		public string Owners_ID
		{
			get
			{
				return this._Owners_ID;
			}
			set
			{
				if ((this._Owners_ID != value))
				{
					if (this._Owner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwners_IDChanging(value);
					this.SendPropertyChanging();
					this._Owners_ID = value;
					this.SendPropertyChanged("Owners_ID");
					this.OnOwners_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Origin_ID", DbType="VarChar(50)")]
		public string Origin_ID
		{
			get
			{
				return this._Origin_ID;
			}
			set
			{
				if ((this._Origin_ID != value))
				{
					if (this._Origin.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrigin_IDChanging(value);
					this.SendPropertyChanging();
					this._Origin_ID = value;
					this.SendPropertyChanged("Origin_ID");
					this.OnOrigin_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Item_ID", DbType="VarChar(50)")]
		public string Item_ID
		{
			get
			{
				return this._Item_ID;
			}
			set
			{
				if ((this._Item_ID != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItem_IDChanging(value);
					this.SendPropertyChanging();
					this._Item_ID = value;
					this.SendPropertyChanged("Item_ID");
					this.OnItem_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Log", Storage="_Item", ThisKey="Item_ID", OtherKey="Item_ID", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.Logs.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.Logs.Add(this);
						this._Item_ID = value.Item_ID;
					}
					else
					{
						this._Item_ID = default(string);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Origin_Log", Storage="_Origin", ThisKey="Origin_ID", OtherKey="Origin_ID", IsForeignKey=true)]
		public Origin Origin
		{
			get
			{
				return this._Origin.Entity;
			}
			set
			{
				Origin previousValue = this._Origin.Entity;
				if (((previousValue != value) 
							|| (this._Origin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Origin.Entity = null;
						previousValue.Logs.Remove(this);
					}
					this._Origin.Entity = value;
					if ((value != null))
					{
						value.Logs.Add(this);
						this._Origin_ID = value.Origin_ID;
					}
					else
					{
						this._Origin_ID = default(string);
					}
					this.SendPropertyChanged("Origin");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Owner_Log", Storage="_Owner", ThisKey="Owners_ID", OtherKey="Owners_ID", IsForeignKey=true)]
		public Owner Owner
		{
			get
			{
				return this._Owner.Entity;
			}
			set
			{
				Owner previousValue = this._Owner.Entity;
				if (((previousValue != value) 
							|| (this._Owner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Owner.Entity = null;
						previousValue.Logs.Remove(this);
					}
					this._Owner.Entity = value;
					if ((value != null))
					{
						value.Logs.Add(this);
						this._Owners_ID = value.Owners_ID;
					}
					else
					{
						this._Owners_ID = default(string);
					}
					this.SendPropertyChanged("Owner");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pet_Log", Storage="_Pet", ThisKey="Pet_ID", OtherKey="Pet_ID", IsForeignKey=true)]
		public Pet Pet
		{
			get
			{
				return this._Pet.Entity;
			}
			set
			{
				Pet previousValue = this._Pet.Entity;
				if (((previousValue != value) 
							|| (this._Pet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pet.Entity = null;
						previousValue.Logs.Remove(this);
					}
					this._Pet.Entity = value;
					if ((value != null))
					{
						value.Logs.Add(this);
						this._Pet_ID = value.Pet_ID;
					}
					else
					{
						this._Pet_ID = default(string);
					}
					this.SendPropertyChanged("Pet");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Purchase_Log", Storage="_Purchase", ThisKey="Purchase_ID", OtherKey="Purchase_ID", IsForeignKey=true)]
		public Purchase Purchase
		{
			get
			{
				return this._Purchase.Entity;
			}
			set
			{
				Purchase previousValue = this._Purchase.Entity;
				if (((previousValue != value) 
							|| (this._Purchase.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Purchase.Entity = null;
						previousValue.Logs.Remove(this);
					}
					this._Purchase.Entity = value;
					if ((value != null))
					{
						value.Logs.Add(this);
						this._Purchase_ID = value.Purchase_ID;
					}
					else
					{
						this._Purchase_ID = default(string);
					}
					this.SendPropertyChanged("Purchase");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Log", Storage="_Staff", ThisKey="Staff_ID", OtherKey="Staff_ID", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.Logs.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.Logs.Add(this);
						this._Staff_ID = value.Staff_ID;
					}
					else
					{
						this._Staff_ID = default(string);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Origin")]
	public partial class Origin : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Origin_ID;
		
		private string _Origin_FirstName;
		
		private string _Origin_LastName;
		
		private string _Origin_ContactNumber;
		
		private string _Origin_Email;
		
		private EntitySet<Log> _Logs;
		
		private EntitySet<Pet> _Pets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOrigin_IDChanging(string value);
    partial void OnOrigin_IDChanged();
    partial void OnOrigin_FirstNameChanging(string value);
    partial void OnOrigin_FirstNameChanged();
    partial void OnOrigin_LastNameChanging(string value);
    partial void OnOrigin_LastNameChanged();
    partial void OnOrigin_ContactNumberChanging(string value);
    partial void OnOrigin_ContactNumberChanged();
    partial void OnOrigin_EmailChanging(string value);
    partial void OnOrigin_EmailChanged();
    #endregion
		
		public Origin()
		{
			this._Logs = new EntitySet<Log>(new Action<Log>(this.attach_Logs), new Action<Log>(this.detach_Logs));
			this._Pets = new EntitySet<Pet>(new Action<Pet>(this.attach_Pets), new Action<Pet>(this.detach_Pets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Origin_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Origin_ID
		{
			get
			{
				return this._Origin_ID;
			}
			set
			{
				if ((this._Origin_ID != value))
				{
					this.OnOrigin_IDChanging(value);
					this.SendPropertyChanging();
					this._Origin_ID = value;
					this.SendPropertyChanged("Origin_ID");
					this.OnOrigin_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Origin_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Origin_FirstName
		{
			get
			{
				return this._Origin_FirstName;
			}
			set
			{
				if ((this._Origin_FirstName != value))
				{
					this.OnOrigin_FirstNameChanging(value);
					this.SendPropertyChanging();
					this._Origin_FirstName = value;
					this.SendPropertyChanged("Origin_FirstName");
					this.OnOrigin_FirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Origin_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Origin_LastName
		{
			get
			{
				return this._Origin_LastName;
			}
			set
			{
				if ((this._Origin_LastName != value))
				{
					this.OnOrigin_LastNameChanging(value);
					this.SendPropertyChanging();
					this._Origin_LastName = value;
					this.SendPropertyChanged("Origin_LastName");
					this.OnOrigin_LastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Origin_ContactNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Origin_ContactNumber
		{
			get
			{
				return this._Origin_ContactNumber;
			}
			set
			{
				if ((this._Origin_ContactNumber != value))
				{
					this.OnOrigin_ContactNumberChanging(value);
					this.SendPropertyChanging();
					this._Origin_ContactNumber = value;
					this.SendPropertyChanged("Origin_ContactNumber");
					this.OnOrigin_ContactNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Origin_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Origin_Email
		{
			get
			{
				return this._Origin_Email;
			}
			set
			{
				if ((this._Origin_Email != value))
				{
					this.OnOrigin_EmailChanging(value);
					this.SendPropertyChanging();
					this._Origin_Email = value;
					this.SendPropertyChanged("Origin_Email");
					this.OnOrigin_EmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Origin_Log", Storage="_Logs", ThisKey="Origin_ID", OtherKey="Origin_ID")]
		public EntitySet<Log> Logs
		{
			get
			{
				return this._Logs;
			}
			set
			{
				this._Logs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Origin_Pet", Storage="_Pets", ThisKey="Origin_ID", OtherKey="Origin_ID")]
		public EntitySet<Pet> Pets
		{
			get
			{
				return this._Pets;
			}
			set
			{
				this._Pets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Logs(Log entity)
		{
			this.SendPropertyChanging();
			entity.Origin = this;
		}
		
		private void detach_Logs(Log entity)
		{
			this.SendPropertyChanging();
			entity.Origin = null;
		}
		
		private void attach_Pets(Pet entity)
		{
			this.SendPropertyChanging();
			entity.Origin = this;
		}
		
		private void detach_Pets(Pet entity)
		{
			this.SendPropertyChanging();
			entity.Origin = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Owners")]
	public partial class Owner : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Owners_ID;
		
		private string _Owners_FirstName;
		
		private string _Owners_LastName;
		
		private string _Owners_ContactNumber;
		
		private string _Owners_Email;
		
		private EntitySet<Log> _Logs;
		
		private EntitySet<Pet> _Pets;
		
		private EntitySet<Purchase> _Purchases;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnOwners_IDChanging(string value);
    partial void OnOwners_IDChanged();
    partial void OnOwners_FirstNameChanging(string value);
    partial void OnOwners_FirstNameChanged();
    partial void OnOwners_LastNameChanging(string value);
    partial void OnOwners_LastNameChanged();
    partial void OnOwners_ContactNumberChanging(string value);
    partial void OnOwners_ContactNumberChanged();
    partial void OnOwners_EmailChanging(string value);
    partial void OnOwners_EmailChanged();
    #endregion
		
		public Owner()
		{
			this._Logs = new EntitySet<Log>(new Action<Log>(this.attach_Logs), new Action<Log>(this.detach_Logs));
			this._Pets = new EntitySet<Pet>(new Action<Pet>(this.attach_Pets), new Action<Pet>(this.detach_Pets));
			this._Purchases = new EntitySet<Purchase>(new Action<Purchase>(this.attach_Purchases), new Action<Purchase>(this.detach_Purchases));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Owners_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Owners_ID
		{
			get
			{
				return this._Owners_ID;
			}
			set
			{
				if ((this._Owners_ID != value))
				{
					this.OnOwners_IDChanging(value);
					this.SendPropertyChanging();
					this._Owners_ID = value;
					this.SendPropertyChanged("Owners_ID");
					this.OnOwners_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Owners_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Owners_FirstName
		{
			get
			{
				return this._Owners_FirstName;
			}
			set
			{
				if ((this._Owners_FirstName != value))
				{
					this.OnOwners_FirstNameChanging(value);
					this.SendPropertyChanging();
					this._Owners_FirstName = value;
					this.SendPropertyChanged("Owners_FirstName");
					this.OnOwners_FirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Owners_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Owners_LastName
		{
			get
			{
				return this._Owners_LastName;
			}
			set
			{
				if ((this._Owners_LastName != value))
				{
					this.OnOwners_LastNameChanging(value);
					this.SendPropertyChanging();
					this._Owners_LastName = value;
					this.SendPropertyChanged("Owners_LastName");
					this.OnOwners_LastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Owners_ContactNumber", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Owners_ContactNumber
		{
			get
			{
				return this._Owners_ContactNumber;
			}
			set
			{
				if ((this._Owners_ContactNumber != value))
				{
					this.OnOwners_ContactNumberChanging(value);
					this.SendPropertyChanging();
					this._Owners_ContactNumber = value;
					this.SendPropertyChanged("Owners_ContactNumber");
					this.OnOwners_ContactNumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Owners_Email", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Owners_Email
		{
			get
			{
				return this._Owners_Email;
			}
			set
			{
				if ((this._Owners_Email != value))
				{
					this.OnOwners_EmailChanging(value);
					this.SendPropertyChanging();
					this._Owners_Email = value;
					this.SendPropertyChanged("Owners_Email");
					this.OnOwners_EmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Owner_Log", Storage="_Logs", ThisKey="Owners_ID", OtherKey="Owners_ID")]
		public EntitySet<Log> Logs
		{
			get
			{
				return this._Logs;
			}
			set
			{
				this._Logs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Owner_Pet", Storage="_Pets", ThisKey="Owners_ID", OtherKey="Owners_ID")]
		public EntitySet<Pet> Pets
		{
			get
			{
				return this._Pets;
			}
			set
			{
				this._Pets.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Owner_Purchase", Storage="_Purchases", ThisKey="Owners_ID", OtherKey="Owners_ID")]
		public EntitySet<Purchase> Purchases
		{
			get
			{
				return this._Purchases;
			}
			set
			{
				this._Purchases.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Logs(Log entity)
		{
			this.SendPropertyChanging();
			entity.Owner = this;
		}
		
		private void detach_Logs(Log entity)
		{
			this.SendPropertyChanging();
			entity.Owner = null;
		}
		
		private void attach_Pets(Pet entity)
		{
			this.SendPropertyChanging();
			entity.Owner = this;
		}
		
		private void detach_Pets(Pet entity)
		{
			this.SendPropertyChanging();
			entity.Owner = null;
		}
		
		private void attach_Purchases(Purchase entity)
		{
			this.SendPropertyChanging();
			entity.Owner = this;
		}
		
		private void detach_Purchases(Purchase entity)
		{
			this.SendPropertyChanging();
			entity.Owner = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Pet")]
	public partial class Pet : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Pet_ID;
		
		private string _Pet_Name;
		
		private string _Pet_Type;
		
		private string _Pet_Sex;
		
		private string _Pet_Pedigree;
		
		private string _Pet_Color;
		
		private System.DateTime _Pet_Birthday;
		
		private string _Pet_Growth;
		
		private string _Vaccine_ID;
		
		private string _Pet_Info;
		
		private int _Pet_Price;
		
		private string _Pet_Status;
		
		private string _Origin_ID;
		
		private string _Owners_ID;
		
		private string _Pet_Photo;
		
		private EntitySet<Log> _Logs;
		
		private EntitySet<Purchase> _Purchases;
		
		private EntityRef<Origin> _Origin;
		
		private EntityRef<Owner> _Owner;
		
		private EntityRef<Vaccine> _Vaccine;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPet_IDChanging(string value);
    partial void OnPet_IDChanged();
    partial void OnPet_NameChanging(string value);
    partial void OnPet_NameChanged();
    partial void OnPet_TypeChanging(string value);
    partial void OnPet_TypeChanged();
    partial void OnPet_SexChanging(string value);
    partial void OnPet_SexChanged();
    partial void OnPet_PedigreeChanging(string value);
    partial void OnPet_PedigreeChanged();
    partial void OnPet_ColorChanging(string value);
    partial void OnPet_ColorChanged();
    partial void OnPet_BirthdayChanging(System.DateTime value);
    partial void OnPet_BirthdayChanged();
    partial void OnPet_GrowthChanging(string value);
    partial void OnPet_GrowthChanged();
    partial void OnVaccine_IDChanging(string value);
    partial void OnVaccine_IDChanged();
    partial void OnPet_InfoChanging(string value);
    partial void OnPet_InfoChanged();
    partial void OnPet_PriceChanging(int value);
    partial void OnPet_PriceChanged();
    partial void OnPet_StatusChanging(string value);
    partial void OnPet_StatusChanged();
    partial void OnOrigin_IDChanging(string value);
    partial void OnOrigin_IDChanged();
    partial void OnOwners_IDChanging(string value);
    partial void OnOwners_IDChanged();
    partial void OnPet_PhotoChanging(string value);
    partial void OnPet_PhotoChanged();
    #endregion
		
		public Pet()
		{
			this._Logs = new EntitySet<Log>(new Action<Log>(this.attach_Logs), new Action<Log>(this.detach_Logs));
			this._Purchases = new EntitySet<Purchase>(new Action<Purchase>(this.attach_Purchases), new Action<Purchase>(this.detach_Purchases));
			this._Origin = default(EntityRef<Origin>);
			this._Owner = default(EntityRef<Owner>);
			this._Vaccine = default(EntityRef<Vaccine>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pet_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Pet_ID
		{
			get
			{
				return this._Pet_ID;
			}
			set
			{
				if ((this._Pet_ID != value))
				{
					this.OnPet_IDChanging(value);
					this.SendPropertyChanging();
					this._Pet_ID = value;
					this.SendPropertyChanged("Pet_ID");
					this.OnPet_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pet_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Pet_Name
		{
			get
			{
				return this._Pet_Name;
			}
			set
			{
				if ((this._Pet_Name != value))
				{
					this.OnPet_NameChanging(value);
					this.SendPropertyChanging();
					this._Pet_Name = value;
					this.SendPropertyChanged("Pet_Name");
					this.OnPet_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pet_Type", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Pet_Type
		{
			get
			{
				return this._Pet_Type;
			}
			set
			{
				if ((this._Pet_Type != value))
				{
					this.OnPet_TypeChanging(value);
					this.SendPropertyChanging();
					this._Pet_Type = value;
					this.SendPropertyChanged("Pet_Type");
					this.OnPet_TypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pet_Sex", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Pet_Sex
		{
			get
			{
				return this._Pet_Sex;
			}
			set
			{
				if ((this._Pet_Sex != value))
				{
					this.OnPet_SexChanging(value);
					this.SendPropertyChanging();
					this._Pet_Sex = value;
					this.SendPropertyChanged("Pet_Sex");
					this.OnPet_SexChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pet_Pedigree", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Pet_Pedigree
		{
			get
			{
				return this._Pet_Pedigree;
			}
			set
			{
				if ((this._Pet_Pedigree != value))
				{
					this.OnPet_PedigreeChanging(value);
					this.SendPropertyChanging();
					this._Pet_Pedigree = value;
					this.SendPropertyChanged("Pet_Pedigree");
					this.OnPet_PedigreeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pet_Color", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Pet_Color
		{
			get
			{
				return this._Pet_Color;
			}
			set
			{
				if ((this._Pet_Color != value))
				{
					this.OnPet_ColorChanging(value);
					this.SendPropertyChanging();
					this._Pet_Color = value;
					this.SendPropertyChanged("Pet_Color");
					this.OnPet_ColorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pet_Birthday", DbType="Date NOT NULL")]
		public System.DateTime Pet_Birthday
		{
			get
			{
				return this._Pet_Birthday;
			}
			set
			{
				if ((this._Pet_Birthday != value))
				{
					this.OnPet_BirthdayChanging(value);
					this.SendPropertyChanging();
					this._Pet_Birthday = value;
					this.SendPropertyChanged("Pet_Birthday");
					this.OnPet_BirthdayChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pet_Growth", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Pet_Growth
		{
			get
			{
				return this._Pet_Growth;
			}
			set
			{
				if ((this._Pet_Growth != value))
				{
					this.OnPet_GrowthChanging(value);
					this.SendPropertyChanging();
					this._Pet_Growth = value;
					this.SendPropertyChanged("Pet_Growth");
					this.OnPet_GrowthChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Vaccine_ID", DbType="VarChar(50)")]
		public string Vaccine_ID
		{
			get
			{
				return this._Vaccine_ID;
			}
			set
			{
				if ((this._Vaccine_ID != value))
				{
					if (this._Vaccine.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnVaccine_IDChanging(value);
					this.SendPropertyChanging();
					this._Vaccine_ID = value;
					this.SendPropertyChanged("Vaccine_ID");
					this.OnVaccine_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pet_Info", DbType="VarChar(50)")]
		public string Pet_Info
		{
			get
			{
				return this._Pet_Info;
			}
			set
			{
				if ((this._Pet_Info != value))
				{
					this.OnPet_InfoChanging(value);
					this.SendPropertyChanging();
					this._Pet_Info = value;
					this.SendPropertyChanged("Pet_Info");
					this.OnPet_InfoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pet_Price", DbType="Int NOT NULL")]
		public int Pet_Price
		{
			get
			{
				return this._Pet_Price;
			}
			set
			{
				if ((this._Pet_Price != value))
				{
					this.OnPet_PriceChanging(value);
					this.SendPropertyChanging();
					this._Pet_Price = value;
					this.SendPropertyChanged("Pet_Price");
					this.OnPet_PriceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pet_Status", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Pet_Status
		{
			get
			{
				return this._Pet_Status;
			}
			set
			{
				if ((this._Pet_Status != value))
				{
					this.OnPet_StatusChanging(value);
					this.SendPropertyChanging();
					this._Pet_Status = value;
					this.SendPropertyChanged("Pet_Status");
					this.OnPet_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Origin_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Origin_ID
		{
			get
			{
				return this._Origin_ID;
			}
			set
			{
				if ((this._Origin_ID != value))
				{
					if (this._Origin.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOrigin_IDChanging(value);
					this.SendPropertyChanging();
					this._Origin_ID = value;
					this.SendPropertyChanged("Origin_ID");
					this.OnOrigin_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Owners_ID", DbType="VarChar(50)")]
		public string Owners_ID
		{
			get
			{
				return this._Owners_ID;
			}
			set
			{
				if ((this._Owners_ID != value))
				{
					if (this._Owner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwners_IDChanging(value);
					this.SendPropertyChanging();
					this._Owners_ID = value;
					this.SendPropertyChanged("Owners_ID");
					this.OnOwners_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pet_Photo", DbType="VarChar(255)")]
		public string Pet_Photo
		{
			get
			{
				return this._Pet_Photo;
			}
			set
			{
				if ((this._Pet_Photo != value))
				{
					this.OnPet_PhotoChanging(value);
					this.SendPropertyChanging();
					this._Pet_Photo = value;
					this.SendPropertyChanged("Pet_Photo");
					this.OnPet_PhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pet_Log", Storage="_Logs", ThisKey="Pet_ID", OtherKey="Pet_ID")]
		public EntitySet<Log> Logs
		{
			get
			{
				return this._Logs;
			}
			set
			{
				this._Logs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pet_Purchase", Storage="_Purchases", ThisKey="Pet_ID", OtherKey="Pet_ID")]
		public EntitySet<Purchase> Purchases
		{
			get
			{
				return this._Purchases;
			}
			set
			{
				this._Purchases.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Origin_Pet", Storage="_Origin", ThisKey="Origin_ID", OtherKey="Origin_ID", IsForeignKey=true)]
		public Origin Origin
		{
			get
			{
				return this._Origin.Entity;
			}
			set
			{
				Origin previousValue = this._Origin.Entity;
				if (((previousValue != value) 
							|| (this._Origin.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Origin.Entity = null;
						previousValue.Pets.Remove(this);
					}
					this._Origin.Entity = value;
					if ((value != null))
					{
						value.Pets.Add(this);
						this._Origin_ID = value.Origin_ID;
					}
					else
					{
						this._Origin_ID = default(string);
					}
					this.SendPropertyChanged("Origin");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Owner_Pet", Storage="_Owner", ThisKey="Owners_ID", OtherKey="Owners_ID", IsForeignKey=true)]
		public Owner Owner
		{
			get
			{
				return this._Owner.Entity;
			}
			set
			{
				Owner previousValue = this._Owner.Entity;
				if (((previousValue != value) 
							|| (this._Owner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Owner.Entity = null;
						previousValue.Pets.Remove(this);
					}
					this._Owner.Entity = value;
					if ((value != null))
					{
						value.Pets.Add(this);
						this._Owners_ID = value.Owners_ID;
					}
					else
					{
						this._Owners_ID = default(string);
					}
					this.SendPropertyChanged("Owner");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vaccine_Pet", Storage="_Vaccine", ThisKey="Vaccine_ID", OtherKey="Vaccine_ID", IsForeignKey=true)]
		public Vaccine Vaccine
		{
			get
			{
				return this._Vaccine.Entity;
			}
			set
			{
				Vaccine previousValue = this._Vaccine.Entity;
				if (((previousValue != value) 
							|| (this._Vaccine.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Vaccine.Entity = null;
						previousValue.Pets.Remove(this);
					}
					this._Vaccine.Entity = value;
					if ((value != null))
					{
						value.Pets.Add(this);
						this._Vaccine_ID = value.Vaccine_ID;
					}
					else
					{
						this._Vaccine_ID = default(string);
					}
					this.SendPropertyChanged("Vaccine");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Logs(Log entity)
		{
			this.SendPropertyChanging();
			entity.Pet = this;
		}
		
		private void detach_Logs(Log entity)
		{
			this.SendPropertyChanging();
			entity.Pet = null;
		}
		
		private void attach_Purchases(Purchase entity)
		{
			this.SendPropertyChanging();
			entity.Pet = this;
		}
		
		private void detach_Purchases(Purchase entity)
		{
			this.SendPropertyChanging();
			entity.Pet = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Purchase")]
	public partial class Purchase : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Purchase_ID;
		
		private string _Pet_ID;
		
		private string _Item_ID;
		
		private string _Item_Quantity;
		
		private int _Purchase_Total;
		
		private System.DateTime _Purchase_Date;
		
		private string _Owners_ID;
		
		private string _Customer_Number;
		
		private string _Staff_ID;
		
		private EntitySet<Log> _Logs;
		
		private EntityRef<Item> _Item;
		
		private EntityRef<Owner> _Owner;
		
		private EntityRef<Pet> _Pet;
		
		private EntityRef<Staff> _Staff;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPurchase_IDChanging(string value);
    partial void OnPurchase_IDChanged();
    partial void OnPet_IDChanging(string value);
    partial void OnPet_IDChanged();
    partial void OnItem_IDChanging(string value);
    partial void OnItem_IDChanged();
    partial void OnItem_QuantityChanging(string value);
    partial void OnItem_QuantityChanged();
    partial void OnPurchase_TotalChanging(int value);
    partial void OnPurchase_TotalChanged();
    partial void OnPurchase_DateChanging(System.DateTime value);
    partial void OnPurchase_DateChanged();
    partial void OnOwners_IDChanging(string value);
    partial void OnOwners_IDChanged();
    partial void OnCustomer_NumberChanging(string value);
    partial void OnCustomer_NumberChanged();
    partial void OnStaff_IDChanging(string value);
    partial void OnStaff_IDChanged();
    #endregion
		
		public Purchase()
		{
			this._Logs = new EntitySet<Log>(new Action<Log>(this.attach_Logs), new Action<Log>(this.detach_Logs));
			this._Item = default(EntityRef<Item>);
			this._Owner = default(EntityRef<Owner>);
			this._Pet = default(EntityRef<Pet>);
			this._Staff = default(EntityRef<Staff>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Purchase_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Purchase_ID
		{
			get
			{
				return this._Purchase_ID;
			}
			set
			{
				if ((this._Purchase_ID != value))
				{
					this.OnPurchase_IDChanging(value);
					this.SendPropertyChanging();
					this._Purchase_ID = value;
					this.SendPropertyChanged("Purchase_ID");
					this.OnPurchase_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Pet_ID", DbType="VarChar(50)")]
		public string Pet_ID
		{
			get
			{
				return this._Pet_ID;
			}
			set
			{
				if ((this._Pet_ID != value))
				{
					if (this._Pet.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPet_IDChanging(value);
					this.SendPropertyChanging();
					this._Pet_ID = value;
					this.SendPropertyChanged("Pet_ID");
					this.OnPet_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Item_ID", DbType="VarChar(50)")]
		public string Item_ID
		{
			get
			{
				return this._Item_ID;
			}
			set
			{
				if ((this._Item_ID != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItem_IDChanging(value);
					this.SendPropertyChanging();
					this._Item_ID = value;
					this.SendPropertyChanged("Item_ID");
					this.OnItem_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Item_Quantity", DbType="VarChar(50)")]
		public string Item_Quantity
		{
			get
			{
				return this._Item_Quantity;
			}
			set
			{
				if ((this._Item_Quantity != value))
				{
					this.OnItem_QuantityChanging(value);
					this.SendPropertyChanging();
					this._Item_Quantity = value;
					this.SendPropertyChanged("Item_Quantity");
					this.OnItem_QuantityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Purchase_Total", DbType="Int NOT NULL")]
		public int Purchase_Total
		{
			get
			{
				return this._Purchase_Total;
			}
			set
			{
				if ((this._Purchase_Total != value))
				{
					this.OnPurchase_TotalChanging(value);
					this.SendPropertyChanging();
					this._Purchase_Total = value;
					this.SendPropertyChanged("Purchase_Total");
					this.OnPurchase_TotalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Purchase_Date", DbType="Date NOT NULL")]
		public System.DateTime Purchase_Date
		{
			get
			{
				return this._Purchase_Date;
			}
			set
			{
				if ((this._Purchase_Date != value))
				{
					this.OnPurchase_DateChanging(value);
					this.SendPropertyChanging();
					this._Purchase_Date = value;
					this.SendPropertyChanged("Purchase_Date");
					this.OnPurchase_DateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Owners_ID", DbType="VarChar(50)")]
		public string Owners_ID
		{
			get
			{
				return this._Owners_ID;
			}
			set
			{
				if ((this._Owners_ID != value))
				{
					if (this._Owner.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnOwners_IDChanging(value);
					this.SendPropertyChanging();
					this._Owners_ID = value;
					this.SendPropertyChanged("Owners_ID");
					this.OnOwners_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Customer_Number", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Customer_Number
		{
			get
			{
				return this._Customer_Number;
			}
			set
			{
				if ((this._Customer_Number != value))
				{
					this.OnCustomer_NumberChanging(value);
					this.SendPropertyChanging();
					this._Customer_Number = value;
					this.SendPropertyChanged("Customer_Number");
					this.OnCustomer_NumberChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Staff_ID
		{
			get
			{
				return this._Staff_ID;
			}
			set
			{
				if ((this._Staff_ID != value))
				{
					if (this._Staff.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaff_IDChanging(value);
					this.SendPropertyChanging();
					this._Staff_ID = value;
					this.SendPropertyChanged("Staff_ID");
					this.OnStaff_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Purchase_Log", Storage="_Logs", ThisKey="Purchase_ID", OtherKey="Purchase_ID")]
		public EntitySet<Log> Logs
		{
			get
			{
				return this._Logs;
			}
			set
			{
				this._Logs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Purchase", Storage="_Item", ThisKey="Item_ID", OtherKey="Item_ID", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.Purchases.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.Purchases.Add(this);
						this._Item_ID = value.Item_ID;
					}
					else
					{
						this._Item_ID = default(string);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Owner_Purchase", Storage="_Owner", ThisKey="Owners_ID", OtherKey="Owners_ID", IsForeignKey=true)]
		public Owner Owner
		{
			get
			{
				return this._Owner.Entity;
			}
			set
			{
				Owner previousValue = this._Owner.Entity;
				if (((previousValue != value) 
							|| (this._Owner.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Owner.Entity = null;
						previousValue.Purchases.Remove(this);
					}
					this._Owner.Entity = value;
					if ((value != null))
					{
						value.Purchases.Add(this);
						this._Owners_ID = value.Owners_ID;
					}
					else
					{
						this._Owners_ID = default(string);
					}
					this.SendPropertyChanged("Owner");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Pet_Purchase", Storage="_Pet", ThisKey="Pet_ID", OtherKey="Pet_ID", IsForeignKey=true)]
		public Pet Pet
		{
			get
			{
				return this._Pet.Entity;
			}
			set
			{
				Pet previousValue = this._Pet.Entity;
				if (((previousValue != value) 
							|| (this._Pet.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Pet.Entity = null;
						previousValue.Purchases.Remove(this);
					}
					this._Pet.Entity = value;
					if ((value != null))
					{
						value.Purchases.Add(this);
						this._Pet_ID = value.Pet_ID;
					}
					else
					{
						this._Pet_ID = default(string);
					}
					this.SendPropertyChanged("Pet");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Purchase", Storage="_Staff", ThisKey="Staff_ID", OtherKey="Staff_ID", IsForeignKey=true)]
		public Staff Staff
		{
			get
			{
				return this._Staff.Entity;
			}
			set
			{
				Staff previousValue = this._Staff.Entity;
				if (((previousValue != value) 
							|| (this._Staff.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Staff.Entity = null;
						previousValue.Purchases.Remove(this);
					}
					this._Staff.Entity = value;
					if ((value != null))
					{
						value.Purchases.Add(this);
						this._Staff_ID = value.Staff_ID;
					}
					else
					{
						this._Staff_ID = default(string);
					}
					this.SendPropertyChanged("Staff");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Logs(Log entity)
		{
			this.SendPropertyChanging();
			entity.Purchase = this;
		}
		
		private void detach_Logs(Log entity)
		{
			this.SendPropertyChanging();
			entity.Purchase = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Staff")]
	public partial class Staff : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Staff_ID;
		
		private string _Staff_FirstName;
		
		private string _Staff_LastName;
		
		private string _StaffRole_ID;
		
		private string _Staff_Status;
		
		private string _Staff_Photo;
		
		private EntitySet<Log> _Logs;
		
		private EntitySet<Purchase> _Purchases;
		
		private EntityRef<StaffRole> _StaffRole;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaff_IDChanging(string value);
    partial void OnStaff_IDChanged();
    partial void OnStaff_FirstNameChanging(string value);
    partial void OnStaff_FirstNameChanged();
    partial void OnStaff_LastNameChanging(string value);
    partial void OnStaff_LastNameChanged();
    partial void OnStaffRole_IDChanging(string value);
    partial void OnStaffRole_IDChanged();
    partial void OnStaff_StatusChanging(string value);
    partial void OnStaff_StatusChanged();
    partial void OnStaff_PhotoChanging(string value);
    partial void OnStaff_PhotoChanged();
    #endregion
		
		public Staff()
		{
			this._Logs = new EntitySet<Log>(new Action<Log>(this.attach_Logs), new Action<Log>(this.detach_Logs));
			this._Purchases = new EntitySet<Purchase>(new Action<Purchase>(this.attach_Purchases), new Action<Purchase>(this.detach_Purchases));
			this._StaffRole = default(EntityRef<StaffRole>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Staff_ID
		{
			get
			{
				return this._Staff_ID;
			}
			set
			{
				if ((this._Staff_ID != value))
				{
					this.OnStaff_IDChanging(value);
					this.SendPropertyChanging();
					this._Staff_ID = value;
					this.SendPropertyChanged("Staff_ID");
					this.OnStaff_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_FirstName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Staff_FirstName
		{
			get
			{
				return this._Staff_FirstName;
			}
			set
			{
				if ((this._Staff_FirstName != value))
				{
					this.OnStaff_FirstNameChanging(value);
					this.SendPropertyChanging();
					this._Staff_FirstName = value;
					this.SendPropertyChanged("Staff_FirstName");
					this.OnStaff_FirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_LastName", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Staff_LastName
		{
			get
			{
				return this._Staff_LastName;
			}
			set
			{
				if ((this._Staff_LastName != value))
				{
					this.OnStaff_LastNameChanging(value);
					this.SendPropertyChanging();
					this._Staff_LastName = value;
					this.SendPropertyChanged("Staff_LastName");
					this.OnStaff_LastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffRole_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string StaffRole_ID
		{
			get
			{
				return this._StaffRole_ID;
			}
			set
			{
				if ((this._StaffRole_ID != value))
				{
					if (this._StaffRole.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStaffRole_IDChanging(value);
					this.SendPropertyChanging();
					this._StaffRole_ID = value;
					this.SendPropertyChanged("StaffRole_ID");
					this.OnStaffRole_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_Status", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Staff_Status
		{
			get
			{
				return this._Staff_Status;
			}
			set
			{
				if ((this._Staff_Status != value))
				{
					this.OnStaff_StatusChanging(value);
					this.SendPropertyChanging();
					this._Staff_Status = value;
					this.SendPropertyChanged("Staff_Status");
					this.OnStaff_StatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Staff_Photo", DbType="VarChar(255)")]
		public string Staff_Photo
		{
			get
			{
				return this._Staff_Photo;
			}
			set
			{
				if ((this._Staff_Photo != value))
				{
					this.OnStaff_PhotoChanging(value);
					this.SendPropertyChanging();
					this._Staff_Photo = value;
					this.SendPropertyChanged("Staff_Photo");
					this.OnStaff_PhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Log", Storage="_Logs", ThisKey="Staff_ID", OtherKey="Staff_ID")]
		public EntitySet<Log> Logs
		{
			get
			{
				return this._Logs;
			}
			set
			{
				this._Logs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Staff_Purchase", Storage="_Purchases", ThisKey="Staff_ID", OtherKey="Staff_ID")]
		public EntitySet<Purchase> Purchases
		{
			get
			{
				return this._Purchases;
			}
			set
			{
				this._Purchases.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffRole_Staff", Storage="_StaffRole", ThisKey="StaffRole_ID", OtherKey="StaffRole_ID", IsForeignKey=true)]
		public StaffRole StaffRole
		{
			get
			{
				return this._StaffRole.Entity;
			}
			set
			{
				StaffRole previousValue = this._StaffRole.Entity;
				if (((previousValue != value) 
							|| (this._StaffRole.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StaffRole.Entity = null;
						previousValue.Staffs.Remove(this);
					}
					this._StaffRole.Entity = value;
					if ((value != null))
					{
						value.Staffs.Add(this);
						this._StaffRole_ID = value.StaffRole_ID;
					}
					else
					{
						this._StaffRole_ID = default(string);
					}
					this.SendPropertyChanged("StaffRole");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Logs(Log entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_Logs(Log entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
		
		private void attach_Purchases(Purchase entity)
		{
			this.SendPropertyChanging();
			entity.Staff = this;
		}
		
		private void detach_Purchases(Purchase entity)
		{
			this.SendPropertyChanging();
			entity.Staff = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StaffRole")]
	public partial class StaffRole : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _StaffRole_ID;
		
		private string _StaffRole_Description;
		
		private EntitySet<Account> _Accounts;
		
		private EntitySet<Staff> _Staffs;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnStaffRole_IDChanging(string value);
    partial void OnStaffRole_IDChanged();
    partial void OnStaffRole_DescriptionChanging(string value);
    partial void OnStaffRole_DescriptionChanged();
    #endregion
		
		public StaffRole()
		{
			this._Accounts = new EntitySet<Account>(new Action<Account>(this.attach_Accounts), new Action<Account>(this.detach_Accounts));
			this._Staffs = new EntitySet<Staff>(new Action<Staff>(this.attach_Staffs), new Action<Staff>(this.detach_Staffs));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffRole_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string StaffRole_ID
		{
			get
			{
				return this._StaffRole_ID;
			}
			set
			{
				if ((this._StaffRole_ID != value))
				{
					this.OnStaffRole_IDChanging(value);
					this.SendPropertyChanging();
					this._StaffRole_ID = value;
					this.SendPropertyChanged("StaffRole_ID");
					this.OnStaffRole_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StaffRole_Description", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string StaffRole_Description
		{
			get
			{
				return this._StaffRole_Description;
			}
			set
			{
				if ((this._StaffRole_Description != value))
				{
					this.OnStaffRole_DescriptionChanging(value);
					this.SendPropertyChanging();
					this._StaffRole_Description = value;
					this.SendPropertyChanged("StaffRole_Description");
					this.OnStaffRole_DescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffRole_Account", Storage="_Accounts", ThisKey="StaffRole_ID", OtherKey="StaffRole_ID")]
		public EntitySet<Account> Accounts
		{
			get
			{
				return this._Accounts;
			}
			set
			{
				this._Accounts.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StaffRole_Staff", Storage="_Staffs", ThisKey="StaffRole_ID", OtherKey="StaffRole_ID")]
		public EntitySet<Staff> Staffs
		{
			get
			{
				return this._Staffs;
			}
			set
			{
				this._Staffs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.StaffRole = this;
		}
		
		private void detach_Accounts(Account entity)
		{
			this.SendPropertyChanging();
			entity.StaffRole = null;
		}
		
		private void attach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.StaffRole = this;
		}
		
		private void detach_Staffs(Staff entity)
		{
			this.SendPropertyChanging();
			entity.StaffRole = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Vaccine")]
	public partial class Vaccine : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _Vaccine_ID;
		
		private string _Vaccine_Description;
		
		private EntitySet<Pet> _Pets;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnVaccine_IDChanging(string value);
    partial void OnVaccine_IDChanged();
    partial void OnVaccine_DescriptionChanging(string value);
    partial void OnVaccine_DescriptionChanged();
    #endregion
		
		public Vaccine()
		{
			this._Pets = new EntitySet<Pet>(new Action<Pet>(this.attach_Pets), new Action<Pet>(this.detach_Pets));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Vaccine_ID", DbType="VarChar(50) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string Vaccine_ID
		{
			get
			{
				return this._Vaccine_ID;
			}
			set
			{
				if ((this._Vaccine_ID != value))
				{
					this.OnVaccine_IDChanging(value);
					this.SendPropertyChanging();
					this._Vaccine_ID = value;
					this.SendPropertyChanged("Vaccine_ID");
					this.OnVaccine_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Vaccine_Description", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string Vaccine_Description
		{
			get
			{
				return this._Vaccine_Description;
			}
			set
			{
				if ((this._Vaccine_Description != value))
				{
					this.OnVaccine_DescriptionChanging(value);
					this.SendPropertyChanging();
					this._Vaccine_Description = value;
					this.SendPropertyChanged("Vaccine_Description");
					this.OnVaccine_DescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Vaccine_Pet", Storage="_Pets", ThisKey="Vaccine_ID", OtherKey="Vaccine_ID")]
		public EntitySet<Pet> Pets
		{
			get
			{
				return this._Pets;
			}
			set
			{
				this._Pets.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Pets(Pet entity)
		{
			this.SendPropertyChanging();
			entity.Vaccine = this;
		}
		
		private void detach_Pets(Pet entity)
		{
			this.SendPropertyChanging();
			entity.Vaccine = null;
		}
	}
}
#pragma warning restore 1591
